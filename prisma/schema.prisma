// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts        Post[]
  integrations  Integration[]
}

// represent a provider integration for a user
model Integration {
  id            String    @id @default(cuid())
  username          String?
  publicationId       String? // useful for hashnode
  token         String
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  providerId       String
  provider         Provider     @relation(fields: [providerId], references: [id], onDelete: Cascade)
  publications      Publication[]
}

// represent all available blogging providers
model Provider {
    id            String    @id @default(cuid())
    name          ProviderName
    displayName     String
    logoUrl       String
    intructionsUrl      String
    color       String
    integrations  Integration[]
}

enum ProviderName {
    HASHNODE
    DEV
    MEDIUM
}

model Post {
  id            String    @id @default(cuid())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  title          String?    @db.Text
  content         String?   @db.LongText
  cover         String?
  slug          String?
  tags          String?    @db.Text
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  firstPublishedAt      DateTime?
  published     Boolean     @default(false)
  publications       Publication[]
}

// represent a post publication on a specific integration
model Publication {
  id            String    @id @default(cuid())
  publishedAt     DateTime    @default(now())
  url       String
  isCanonical       Boolean     @default(false)
  postId       String
  post         Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  integrationId       String
  integration         Integration     @relation(fields: [integrationId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}